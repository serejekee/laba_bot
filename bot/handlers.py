from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import types, Router, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, InputMediaPhoto, InputMediaAnimation, \
    Message
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from datetime import datetime
from dateutil.relativedelta import relativedelta
from utils import get_user, get_manager, get_product_manager, get_inspector, spreadsheet_id, service, choose_company, \
    get_product_manager_password, get_manager_password, get_inspector_password, get_user_company, upload_to_drive, \
    get_company_name

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
message_ids_n = {}


class Form(StatesGroup):
    waiting_for_reg_product_manager = State()
    waiting_for_reg_manager = State()
    waiting_for_reg_inspector = State()
    waiting_for_user_apply_request = State()


@router.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id

    user_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply_request")],
            [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="upload_document")],
            [InlineKeyboardButton(text="üîç –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", callback_data="check_status")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]
    )

    pm_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè¢ –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π", callback_data="pm_list_companies")],
            [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫", callback_data="pm_view_requests")],
            [InlineKeyboardButton(text="‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="pm_register_request")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]
    )

    manager_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", callback_data="mgr_list_requests")],
            [InlineKeyboardButton(text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏", callback_data="mgr_view_request")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É", callback_data="mgr_accept_request")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]
    )

    inspector_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìë –í—ã–±–æ—Ä –∑–∞—è–≤–æ–∫", callback_data="insp_select_requests")],
            [InlineKeyboardButton(text="üìÇ –§–∞–π–ª—ã –∑–∞—è–≤–æ–∫", callback_data="insp_request_files")],
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ", callback_data="insp_approve_request"),
                InlineKeyboardButton(text="üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data="insp_reject_request")
            ],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")],
        ]
    )

    if str(user_id) == await get_user(user_id):
        await message.answer(
            "üìù –ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=user_kb
        )
    elif str(user_id) == await get_product_manager(user_id):
        await message.answer(
            "üè¢ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=pm_kb
        )
    elif str(user_id) == await get_manager(user_id):
        await message.answer(
            "üìã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, –º–µ–Ω–µ–¥–∂–µ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=manager_kb
        )
    elif str(user_id) == await get_inspector(user_id):
        await message.answer(
            "üìë –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä! –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞—è–≤–æ–∫?",
            reply_markup=inspector_kb
        )
    else:
        await message.answer("‚ùóÔ∏è –í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ.")


"""–ú–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""


@router.message(Command("reg"))
async def registration(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) != await get_user(user_id):
        keyboard = await choose_company()
        if keyboard:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é:", reply_markup=keyboard)
        else:
            await message.answer("–ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


@router.callback_query(lambda call: call.data.startswith("select_company:"))
async def process_company_selection(callback_query: CallbackQuery, state: FSMContext):
    comp_id = callback_query.data.split(':')[1]
    comp_name = await get_company_name(comp_id)
    user_id = callback_query.from_user.id
    user_range = 'users!A:B'
    values = [[str(user_id), comp_name]]

    service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range=user_range,
        valueInputOption='RAW',
        insertDataOption='INSERT_ROWS',
        body={'values': values}
    ).execute()

    await callback_query.message.edit_text(text=f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é ‚úÖ")
    await state.clear()


@router.callback_query(lambda call: call.data.startswith("apply_request"))
async def process_user_apply_request(callback_query: types.CallbackQuery, state: FSMContext):
    text = (
        "<b>–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;):</b>\n\n"
        "<code>"
        "1) APPLICATION ‚Ññ;\n"
        "2) The standard;\n"
        "3) Type of welding joint;\n"
        "4) VMC;\n"
        "5) UT;\n"
        "6) PT;\n"
        "7) RT;\n"
        "8) LT(cerosin);\n"
        "9) LT(vacuum)\n"
        "</code>"
    )
    await callback_query.message.edit_text(text, parse_mode="HTML")
    await state.set_state(Form.waiting_for_user_apply_request)


@router.message(Form.waiting_for_user_apply_request)
async def process_user_apply_request_save(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.replace("\n", " ").strip()
    parts = [p.strip() for p in text.split(";", maxsplit=8)]
    parts = [p for p in parts if p]

    if len(parts) != 9:
        await message.answer(
            "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥–∞–ª–∏ **9** –∑–Ω–∞—á–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π (;).",
            parse_mode="Markdown"
        )
        return

    application, standard, joint_type, vmc, ut, pt, rt, ltc, ltv = parts

    company = await get_user_company(user_id)
    if not company:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    today = datetime.today().strftime("%d-%m-%y_%H:%M")
    template_path = "templates/–ó–∞—è–≤–∫–∞.html"
    output_path = f"output/–ó–∞—è–≤–∫–∞_{application}_{today}.html"

    with open(template_path, "r", encoding="utf-8") as f:
        template = f.read()

    data_map = {"application": application, "company": company, "today": today, "standard": standard,
                "joint_type": joint_type, "vmc": vmc, "ut": ut, "pt": pt, "rt": rt, "ltc": ltc, "ltv": ltv, }
    for key, val in data_map.items():
        template = template.replace(f"{{{key}}}", val)

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(template)

    file_id = upload_to_drive(output_path)
    input_file = types.FSInputFile(output_path)
    if file_id:
        values = [[str(user_id), application, company, today, standard, joint_type, vmc, ut, pt, rt, ltc, ltv, file_id]]
        service.spreadsheets().values().append(
            spreadsheetId=spreadsheet_id,
            range='journal!A3:M',
            valueInputOption='RAW',
            insertDataOption='INSERT_ROWS',
            body={'values': values}
        ).execute()

        await message.answer_document(input_file,
                                      caption="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ")
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ Google –î–∏—Å–∫.")

    await state.clear()


"""–ú–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""


@router.message(Command("reg_p"))
async def registration_product_manager(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if str(user_id) != await get_product_manager(user_id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –ø–∞—Ä–æ–ª—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(Form.waiting_for_reg_product_manager)
    else:
        await message.answer("–í—ã —É–¥–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏!")


@router.callback_query(Form.waiting_for_reg_product_manager)
async def process_for_product_manager(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    password = []
    fio = []
    if user_id:
        fio, password = message.text.split(",")
    if await get_product_manager_password() == password:
        values = [[str(user_id), fio]]
        service.spreadsheets().values().append(
            spreadsheetId=spreadsheet_id,
            range='users!D:E',
            valueInputOption='RAW',
            insertDataOption='INSERT_ROWS',
            body={'values': values}
        ).execute()
        await message.answer(f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è")
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –ø–∞—Ä–æ–ª—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(Form.waiting_for_reg_product_manager)


"""–ú–æ–¥–µ–ª–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""


@router.message(Command("reg_m"))
async def registration_manager(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if str(user_id) != await get_manager(user_id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –ø–∞—Ä–æ–ª—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(Form.waiting_for_reg_manager)
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏!")


@router.callback_query(Form.waiting_for_reg_manager)
async def process_for_manager(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    password = []
    fio = []
    if user_id:
        fio, password = message.text.split(",")
    if await get_manager_password() == password:
        values = [[str(user_id), fio]]
        service.spreadsheets().values().append(
            spreadsheetId=spreadsheet_id,
            range='users!G:H',
            valueInputOption='RAW',
            insertDataOption='INSERT_ROWS',
            body={'values': values}
        ).execute()
        await message.answer(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä ‚úÖ")
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –ø–∞—Ä–æ–ª—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(Form.waiting_for_reg_manager)


"""–ú–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤"""


@router.message(Command("reg_c"))
async def registration_inspector(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if str(user_id) != await get_inspector(user_id):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –ø–∞—Ä–æ–ª—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(Form.waiting_for_reg_inspector)
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏!")


@router.callback_query(Form.waiting_for_reg_inspector)
async def process_for_inspector(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    password = []
    fio = []
    if user_id:
        fio, password = message.text.split(",")
    if await get_inspector_password() == password:
        values = [[str(user_id), fio]]
        service.spreadsheets().values().append(
            spreadsheetId=spreadsheet_id,
            range='users!G:H',
            valueInputOption='RAW',
            insertDataOption='INSERT_ROWS',
            body={'values': values}
        ).execute()
        await message.answer(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∫–∞–∫ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä ‚úÖ")
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –ø–∞—Ä–æ–ª—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(Form.waiting_for_reg_inspector)
